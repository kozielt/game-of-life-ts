{"version":3,"sources":["actions.ts","config/gameLimits.ts","config/initialState.ts","config/presets.ts","config/theme.ts","shared/Button.tsx","shared/Text.tsx","sections/mgmt/Header.tsx","sections/mgmt/Configuration.tsx","reducer.ts","sections/mgmt/MgmtButtons.tsx","sections/mgmt/Management.tsx","sections/board/Cell.tsx","sections/board/BoardColumn.tsx","sections/board/Board.tsx","sections/status/Status.tsx","sections/SidePanelSwitcher.tsx","sections/GameArea.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionTypes","GAME_LIMITS","MIN_SIZE","MAX_SIZE","MIN_INTERVAL","MAX_INTERVAL","initialBoard","INTERVAL","BOARD_SIZE","THEME","buttonCss","css","_templateObject","Button","_ref","className","rest","Object","objectWithoutProperties","react_default","a","createElement","assign","cx","textCss","Text_templateObject","Text","containerCss","Header_templateObject","Header","GameStatus","rowCss","Configuration_templateObject","labelCss","_templateObject2","inputCss","_templateObject3","buttonWrapper","_templateObject4","isSaveDisabled","boardSize","interval","Configuration","_useState","useState","_useState2","slicedToArray","setBoardSize","_useState3","_useState4","setInterval","dispatch","useContext","DispatchContext","Fragment","mgmt_Header","htmlFor","shared_Text","id","type","min","max","value","onChange","e","Number","target","shared_Button","disabled","onClick","newInterval","newBoardSize","CONFIGURATION_UPDATE","reducer","state","action","TICK","boardState","round","updatedBoardState","map","row","rowIndex","cell","cellIndex","rowAbove","rowUnder","currentElementIndex","currentRow","indexesToTry","currentIndex","filter","el","length","getIndexesToTry","liveCellsAround","Boolean","reduce","acc","getNewCellState","objectSpread","config","Array","fill","generateEmptyBoard","START_GAME","gameState","RUNNING","STOP_GAME","PAUSED","RESET_GAME","EDIT_GAME","EDIT","EDIT_CELL","cellCoordinate","index","cellState","buttonsCss","MgmtButtons_templateObject","bottomButtonsCss","MgmtButtons_templateObject2","MgmtButtons","managementCss","Management_templateObject","hiddenCss","Management_templateObject2","Management","isVisible","defineProperty","mgmt_Configuration","mgmt_MgmtButtons","cellCss","Cell_templateObject","activeCss","Cell_templateObject2","notActiveCss","Cell_templateObject3","editCss","Cell_templateObject4","Cell","isActive","isEdit","editAction","BoardColumn_templateObject","BoardColumn","rowState","board_Cell","key","concat","boardClassName","Board_templateObject","Board","rowArray","board_BoardColumn","statusCss","Status_templateObject","runningColor","Status_templateObject2","notActiveColor","Status_templateObject3","textSpaceCss","Status_templateObject4","Status","gameConfig","switcherCss","SidePanelSwitcher_templateObject","SidePanelSwitcher_templateObject2","SidePanelSwitcher","isSidePanelVisible","switchSidePanel","gameAreaCss","GameArea_templateObject","GameArea","status_Status","board_Board","sections_SidePanelSwitcher","appClassName","App_templateObject","initialState","React","createContext","Function","prototype","App","_useReducer","useReducer","_useReducer2","setSidePanelVisible","useEffect","cleanupTimer","clearInterval","Provider","mgmt_Management","sections_GameArea","window","location","hostname","match","__webpack_require__","d","__webpack_exports__","src_App_0","About","style","width","height","display","alignItems","justifyContent","color","Next","router","createHashRouter","path","Component","dist","element","src_App","src_About","src_Next","react_router_dom_dist","createRoot","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58a39a4f.chunk.js","sourcesContent":["export enum ActionTypes {\n  TICK = 'tick',\n  CONFIGURATION_UPDATE = 'configuration_update',\n  START_GAME = 'start_game',\n  STOP_GAME = 'stop_game',\n  RESET_GAME = 'reset_game',\n  EDIT_GAME = 'edit_game',\n  EDIT_CELL = 'edit_cell',\n}\n\nexport interface CellCoordinate {\n  rowIndex: number;\n  cellIndex: number;\n}\n\nexport interface Action {\n  type: ActionTypes;\n  newInterval?: number;\n  newBoardSize?: number;\n  cellCoordinate?: CellCoordinate;\n}\n\nexport const updateConfiguration = (\n  newInterval: number,\n  newBoardSize: number,\n): Action => ({\n  type: ActionTypes.CONFIGURATION_UPDATE,\n  newInterval,\n  newBoardSize,\n});\n\nexport const tick = (): Action => ({ type: ActionTypes.TICK });\n\nexport const startGame = (): Action => ({ type: ActionTypes.START_GAME });\n\nexport const stopGame = (): Action => ({ type: ActionTypes.STOP_GAME });\n\nexport const resetGame = (): Action => ({ type: ActionTypes.RESET_GAME });\n\nexport const editGame = (): Action => ({ type: ActionTypes.EDIT_GAME });\n\nexport const changeCellStatus = (cellCoordinate: CellCoordinate): Action => ({\n  type: ActionTypes.EDIT_CELL,\n  cellCoordinate,\n});\n","export const GAME_LIMITS = {\n  MIN_SIZE: 1,\n  MAX_SIZE: 20,\n\n  MIN_INTERVAL: 50,\n  MAX_INTERVAL: 60 * 1000,\n};\n","import { dieHardPreset } from './presets';\n\nexport const initialBoard: boolean[][] = dieHardPreset;\nexport const INTERVAL: number = 1000;\nexport const BOARD_SIZE: number = 8;\n","export const dieHardPreset: boolean[][] = [\n  [false, false, false, false, false, false, false, false, false],\n  [false, false, false, false, false, false, false, false, false],\n  [false, false, false, false, false, false, false, false, false],\n  [false, false, false, false, false, false, true, false, false],\n  [true, true, false, false, false, false, false, false, false],\n  [false, true, false, false, false, true, true, true, false],\n  [false, false, false, false, false, false, false, false, false],\n  [false, false, false, false, false, false, false, false, false],\n  [false, false, false, false, false, false, false, false, false],\n];\n","export const THEME = {\n  ACTIVE_COLOR: 'aquamarine',\n  DISABLE_COLOR: 'aliceblue',\n\n  DEFAULT_FONT_COLOR: 'lightgray',\n  FONT_SIZE: '1em',\n};\n","import React from 'react';\nimport { css, cx } from 'emotion';\nimport { THEME } from '../config';\n\nconst buttonCss = css`\n  border-radius: 20px;\n  padding: 8px 20px;\n  font-size: ${THEME.FONT_SIZE};\n  background-color: ${THEME.DEFAULT_FONT_COLOR};\n  transition: all 0.2s;\n  cursor: pointer;\n  white-space: nowrap;\n\n  &:hover {\n    transform: translateY(-5px);\n  }\n`;\n\ninterface IButton {\n  onClick: () => void;\n  disabled?: boolean;\n  className?: string;\n  children?: React.ReactNode;\n}\n\nconst Button: React.FC<IButton> = ({ className, ...rest }) => {\n  return <button className={cx(buttonCss, className)} {...rest} />;\n};\n\nexport default Button;\n","import React from 'react';\nimport { css, cx } from 'emotion';\nimport { THEME } from '../config';\n\nconst textCss = css`\n  color: ${THEME.DEFAULT_FONT_COLOR};\n  font-size: ${THEME.FONT_SIZE};\n  font-weight: bold;\n`;\n\ninterface IText {\n  className?: string;\n  children?: React.ReactNode;\n}\n\nconst Text: React.FC<IText> = ({ className, ...rest }) => (\n  <span className={cx(textCss, className)} {...rest} />\n);\n\nexport default Text;\n","import React from 'react';\nimport { css } from 'emotion';\nimport { THEME } from '../../config';\n\nconst containerCss = css`\n  width: 100%;\n  text-align: center;\n  color: ${THEME.DEFAULT_FONT_COLOR};\n`;\n\nconst Header: React.FC = () => (\n  <div className={containerCss}>\n    <h1>Configuration Prod Script</h1>\n  </div>\n);\n\nexport default Header;\n","import React, { useContext, useState } from 'react';\nimport { css } from 'emotion';\nimport { GAME_LIMITS, THEME, BOARD_SIZE, INTERVAL } from '../../config';\nimport { updateConfiguration } from '../../actions';\nimport { DispatchContext } from '../../App';\nimport { Text } from '../../shared';\nimport Button from '../../shared/Button';\nimport Header from './Header';\n\nconst rowCss = css`\n  display: flex;\n  margin: 0 20px 20px 20px;\n  align-items: center;\n`;\n\nconst labelCss = css`\n  flex-grow: 1;\n`;\n\nconst inputCss = css`\n  width: 70px;\n  padding: 6px 10px;\n  border-radius: 10px;\n  font-size: ${THEME.FONT_SIZE};\n`;\n\nconst buttonWrapper = css`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n`;\n\nconst isSaveDisabled = (boardSize: number, interval: number): boolean => {\n  if (boardSize > GAME_LIMITS.MAX_SIZE || boardSize < GAME_LIMITS.MIN_SIZE) {\n    return true;\n  }\n  return (\n    interval > GAME_LIMITS.MAX_INTERVAL || interval < GAME_LIMITS.MIN_INTERVAL\n  );\n};\n\nconst Configuration: React.FC = () => {\n  const [boardSize, setBoardSize] = useState(BOARD_SIZE);\n  const [interval, setInterval] = useState(INTERVAL);\n  const dispatch = useContext(DispatchContext);\n  return (\n    <>\n      <Header />\n      <div>\n        <div className={rowCss}>\n          <label htmlFor=\"boardSize\" className={labelCss}>\n            <Text>Board Size</Text>\n          </label>\n          <input\n            className={inputCss}\n            id=\"boardSize\"\n            type=\"number\"\n            min={GAME_LIMITS.MIN_SIZE}\n            max={GAME_LIMITS.MAX_SIZE}\n            value={boardSize}\n            onChange={e => setBoardSize(Number(e.target.value))}\n          />\n        </div>\n        <div className={rowCss}>\n          <label htmlFor=\"interval\" className={labelCss}>\n            <Text>Interval</Text>\n          </label>\n          <input\n            className={inputCss}\n            id=\"interval\"\n            type=\"number\"\n            min={GAME_LIMITS.MIN_INTERVAL}\n            max={GAME_LIMITS.MAX_INTERVAL}\n            value={interval}\n            onChange={e => setInterval(Number(e.target.value))}\n          />\n        </div>\n        <div className={buttonWrapper}>\n          <Button\n            disabled={isSaveDisabled(boardSize, interval)}\n            onClick={() => {\n              dispatch(updateConfiguration(interval, boardSize));\n              setBoardSize(BOARD_SIZE);\n              setInterval(INTERVAL);\n            }}\n          >\n            Save Changes\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Configuration;\n","import { Action, ActionTypes } from './actions';\nimport { initialBoard, INTERVAL, BOARD_SIZE } from './config';\n\nexport function generateEmptyBoard(boardSize: number): boolean[][] {\n  return new Array(boardSize).fill(new Array(boardSize).fill(false));\n}\n\nexport function getIndexesToTry(\n  currentIndex: number,\n  currentRow: boolean[],\n): number[] {\n  return [currentIndex - 1, currentIndex, currentIndex + 1].filter(\n    el => el >= 0 && el < currentRow.length,\n  );\n}\n\nexport function getNewCellState(\n  currentElementIndex: number,\n  rowAbove: any,\n  currentRow: boolean[],\n  rowUnder: any,\n): boolean {\n  const indexesToTry = getIndexesToTry(currentElementIndex, currentRow);\n\n  const liveCellsAround = [currentRow, rowAbove, rowUnder]\n    .filter(Boolean)\n    .reduce((acc, row) => {\n      const liveCellsInRow = indexesToTry.map(el => row[el]).filter(Boolean)\n        .length;\n      return acc + liveCellsInRow;\n    }, 0);\n\n  const currentState = currentRow[currentElementIndex];\n  if (currentState) {\n    return liveCellsAround === 3 || liveCellsAround === 4;\n  }\n  return liveCellsAround === 3;\n}\n\nexport enum GameStatus {\n  EDIT = 'edit',\n  PAUSED = 'paused',\n  RUNNING = 'running',\n}\n\nexport interface GameConfig {\n  boardSize: number;\n  gameState: GameStatus;\n  interval: number;\n}\n\nexport interface State {\n  boardState: boolean[][];\n  config: GameConfig;\n  round: number;\n}\n\nexport function reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case ActionTypes.TICK: {\n      const { boardState, round } = state;\n      const updatedBoardState = boardState.map((row, rowIndex) =>\n        row.map((cell, cellIndex) => {\n          const rowAbove = boardState[rowIndex - 1];\n          const rowUnder = boardState[rowIndex + 1];\n          return getNewCellState(cellIndex, rowAbove, row, rowUnder);\n        }),\n      );\n      return {\n        ...state,\n        boardState: updatedBoardState,\n        round: round + 1,\n      };\n    }\n\n    case ActionTypes.CONFIGURATION_UPDATE: {\n      const interval = action.newInterval || INTERVAL;\n\n      const boardSize = action.newBoardSize || BOARD_SIZE;\n      const hasBoardSizeChanged = state.config.boardSize !== boardSize;\n\n      if (hasBoardSizeChanged) {\n        const boardState = generateEmptyBoard(boardSize);\n        return {\n          ...state,\n          boardState,\n          config: { ...state.config, interval, boardSize },\n        };\n      }\n\n      return {\n        ...state,\n        config: { ...state.config, interval },\n      };\n    }\n\n    case ActionTypes.START_GAME:\n      return {\n        ...state,\n        config: { ...state.config, gameState: GameStatus.RUNNING },\n      };\n\n    case ActionTypes.STOP_GAME:\n      return {\n        ...state,\n        config: { ...state.config, gameState: GameStatus.PAUSED },\n      };\n\n    case ActionTypes.RESET_GAME:\n      return {\n        ...state,\n        boardState: initialBoard,\n        round: 0,\n      };\n\n    case ActionTypes.EDIT_GAME:\n      return {\n        ...state,\n        config: { ...state.config, gameState: GameStatus.EDIT },\n      };\n\n    case ActionTypes.EDIT_CELL: {\n      const { boardState } = state;\n      const { cellCoordinate } = action;\n      if (!cellCoordinate) {\n        return state;\n      }\n      return {\n        ...state,\n        boardState: boardState.map((row, index) => {\n          if (index === cellCoordinate.rowIndex) {\n            return row.map((cellState, cellIndex) => {\n              if (cellCoordinate.cellIndex === cellIndex) {\n                return !cellState;\n              }\n              return cellState;\n            });\n          }\n          return row;\n        }),\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n","import React, { useContext } from 'react';\nimport { css } from 'emotion';\nimport { resetGame, startGame, stopGame, editGame } from '../../actions';\nimport { DispatchContext } from '../../App';\nimport Button from '../../shared/Button';\nimport { GameStatus } from '../../reducer';\n\nconst buttonsCss = css`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  flex-grow: 1;\n\n  & > * {\n    margin-bottom: 10px;\n  }\n`;\n\nconst bottomButtonsCss = css`\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n\n  & > button {\n    margin-bottom: 10px;\n  }\n\n  @media only screen and (min-width: 1200px) {\n    flex-direction: row;\n    align-items: flex-end;\n\n    & > button {\n      max-height: 36px;\n\n      :not(:last-child) {\n        margin-right: 10px;\n      }\n    }\n  }\n`;\n\ninterface IButtons {\n  gameState: GameStatus;\n}\n\nconst MgmtButtons: React.FC<IButtons> = ({ gameState }) => {\n  const dispatch = useContext(DispatchContext);\n  return (\n    <div className={buttonsCss}>\n      <div className={bottomButtonsCss}>\n        {gameState === GameStatus.RUNNING && (\n          <Button onClick={() => dispatch(stopGame())}>Pause Game</Button>\n        )}\n        {gameState !== GameStatus.RUNNING && (\n          <Button onClick={() => dispatch(startGame())}>Start Game</Button>\n        )}\n        {gameState !== GameStatus.EDIT && (\n          <Button onClick={() => dispatch(editGame())}>Edit Game</Button>\n        )}\n        <Button onClick={() => dispatch(resetGame())}>Reset Game</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default MgmtButtons;\n","import React from 'react';\nimport { css, cx } from 'emotion';\nimport { GameStatus } from '../../reducer';\nimport Configuration from './Configuration';\nimport MgmtButtons from './MgmtButtons';\n\nconst managementCss = css`\n  width: 450px;\n  background-color: #363a42;\n  transition: width 1s, margin 1s ease-in-out;\n\n  display: flex;\n  flex-direction: column;\n\n  @media only screen and (max-width: 1200px) {\n    width: 300px;\n  }\n`;\n\nconst hiddenCss = css`\n  margin-left: -450px;\n\n  @media only screen and (max-width: 1200px) {\n    margin-left: -300px;\n  }\n`;\n\ninterface IManagement {\n  gameState: GameStatus;\n  isVisible: boolean;\n}\n\nconst Management: React.FC<IManagement> = ({ gameState, isVisible }) => {\n  return (\n    <div className={cx(managementCss, { [hiddenCss]: !isVisible })}>\n      <Configuration />\n      <MgmtButtons gameState={gameState} />\n    </div>\n  );\n};\n\nexport default Management;\n","import React from 'react';\nimport { css, cx } from 'emotion';\nimport { THEME } from '../../config';\n\nconst cellCss = css`\n  width: 50px;\n  height: 50px;\n  border: 1px solid black;\n`;\n\nconst activeCss = css`\n  background-color: ${THEME.ACTIVE_COLOR};\n`;\n\nconst notActiveCss = css`\n  background-color: ${THEME.DISABLE_COLOR};\n`;\n\nconst editCss = css`\n  cursor: pointer;\n`;\n\ninterface ICell {\n  isActive: boolean;\n  isEdit: boolean;\n  editAction: () => void;\n}\n\nconst Cell: React.FC<ICell> = ({ isActive, isEdit, editAction }) => {\n  return (\n    <div\n      onClick={() => isEdit && editAction()}\n      className={cx(\n        cellCss,\n        isActive ? activeCss : notActiveCss,\n        isEdit ? editCss : null,\n      )}\n    />\n  );\n};\n\nexport default Cell;\n","import React, { useContext } from 'react';\nimport { css } from 'emotion';\nimport Cell from './Cell';\nimport { DispatchContext } from '../../App';\nimport { changeCellStatus } from '../../actions';\n\nconst className = css`\n  display: flex;\n`;\n\ninterface IBoardColumn {\n  isEdit: boolean;\n  rowIndex: number;\n  rowState: boolean[];\n}\n\nconst BoardColumn: React.FC<IBoardColumn> = ({\n  isEdit,\n  rowIndex,\n  rowState,\n}) => {\n  const dispatch = useContext(DispatchContext);\n  return (\n    <div className={className}>\n      {rowState.map((isActive, cellIndex) => (\n        <Cell\n          isActive={isActive}\n          key={`${cellIndex}`}\n          editAction={() => {\n            dispatch(changeCellStatus({ rowIndex, cellIndex }));\n          }}\n          isEdit={isEdit}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default BoardColumn;\n","import React from 'react';\nimport { css } from 'emotion';\nimport BoardColumn from './BoardColumn';\n\nconst boardClassName = css`\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  flex-grow: 1;\n  padding: 30px;\n`;\n\ninterface IBoard {\n  boardState: boolean[][];\n  isEdit: boolean;\n}\n\nconst Board: React.FC<IBoard> = ({ boardState, isEdit }) => {\n  return (\n    <div className={boardClassName}>\n      {boardState.map((rowArray, rowIndex) => (\n        <BoardColumn\n          rowState={rowArray}\n          key={rowIndex}\n          rowIndex={rowIndex}\n          isEdit={isEdit}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Board;\n","import React from 'react';\nimport { css } from 'emotion';\nimport { THEME } from '../../config';\nimport { GameStatus, GameConfig } from '../../reducer';\nimport { Text } from '../../shared';\n\nconst statusCss = css`\n  width: 100%;\n  text-align: center;\n  color: ${THEME.DEFAULT_FONT_COLOR};\n`;\n\nconst runningColor = css`\n  color: lime;\n`;\n\nconst notActiveColor = css`\n  color: orange;\n`;\n\nconst textSpaceCss = css`\n  display: inline-block;\n  margin-right: 10px;\n`;\n\ninterface IStatus {\n  gameConfig: GameConfig;\n  round: number;\n}\n\nconst Status: React.FC<IStatus> = ({ gameConfig, round }) => {\n  const { gameState, interval, boardSize } = gameConfig;\n  return (\n    <div className={statusCss}>\n      <h1>\n        Game Status:{' '}\n        {gameState === GameStatus.RUNNING && (\n          <span className={runningColor}>Running</span>\n        )}\n        {gameState === GameStatus.PAUSED && (\n          <span className={notActiveColor}>Paused</span>\n        )}\n        {gameState === GameStatus.EDIT && (\n          <span className={notActiveColor}>Edit</span>\n        )}\n      </h1>\n      <Text className={textSpaceCss}>Round: {round}</Text>\n      <Text className={textSpaceCss}>Board Size: {boardSize}</Text>\n      <Text>Interval: {interval} ms</Text>\n    </div>\n  );\n};\n\nexport default Status;\n","import React from 'react';\nimport { css } from 'emotion';\nimport { Button } from '../shared';\n\nconst switcherCss = css`\n  position: absolute;\n  bottom: 20px;\n  left: 30px;\n`;\n\nconst buttonCss = css`\n  font-weight: bold;\n`;\n\ninterface ISidePanelSwitcher {\n  isSidePanelVisible: boolean;\n  switchSidePanel: () => void;\n}\n\nconst SidePanelSwitcher: React.FC<ISidePanelSwitcher> = ({\n  isSidePanelVisible,\n  switchSidePanel,\n}) => {\n  return (\n    <div className={switcherCss}>\n      <Button onClick={switchSidePanel} className={buttonCss}>\n        {isSidePanelVisible ? '\\u2190' : '\\u2192'}\n      </Button>\n    </div>\n  );\n};\n\nexport default SidePanelSwitcher;\n","import React from 'react';\nimport { css } from 'emotion';\nimport Board from './board';\nimport Status from './status';\nimport SidePanelSwitcher from './SidePanelSwitcher';\nimport { GameStatus, GameConfig } from '../reducer';\n\nconst gameAreaCss = css`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 3;\n`;\n\ninterface IGameArea {\n  boardState: boolean[][];\n  gameConfig: GameConfig;\n  isSidePanelVisible: boolean;\n  round: number;\n  switchSidePanel: () => void;\n}\n\nconst GameArea: React.FC<IGameArea> = ({\n  boardState,\n  gameConfig,\n  isSidePanelVisible,\n  round,\n  switchSidePanel,\n}) => {\n  return (\n    <div className={gameAreaCss}>\n      <Status gameConfig={gameConfig} round={round} />\n      <Board\n        boardState={boardState}\n        isEdit={GameStatus.EDIT === gameConfig.gameState}\n      />\n      <SidePanelSwitcher\n        isSidePanelVisible={isSidePanelVisible}\n        switchSidePanel={switchSidePanel}\n      />\n    </div>\n  );\n};\n\nexport default GameArea;\n","import React, { useEffect, useReducer, useState } from 'react';\nimport { css } from 'emotion';\nimport { GameArea, Management } from './sections';\nimport { GameStatus, reducer, State } from './reducer';\nimport { tick } from './actions';\nimport { initialBoard, BOARD_SIZE, INTERVAL } from './config';\n\nconst appClassName = css`\n  min-height: 100vh;\n  display: flex;\n  align-items: stretch;\n`;\n\nconst initialState: State = {\n  boardState: initialBoard,\n  round: 0,\n  config: {\n    interval: INTERVAL,\n    gameState: GameStatus.PAUSED,\n    boardSize: BOARD_SIZE,\n  },\n};\n\nexport const DispatchContext = React.createContext(Function.prototype);\n\nconst App: React.FC = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [isSidePanelVisible, setSidePanelVisible] = useState(true);\n  const { boardState, round, config } = state;\n  const { interval, gameState } = config;\n\n  useEffect(() => {\n    const cleanupTimer = setInterval(() => {\n      if (gameState === GameStatus.RUNNING) {\n        dispatch(tick());\n      }\n    }, interval);\n    return () => clearInterval(cleanupTimer);\n  }, [gameState, interval]);\n\n  return (\n    <DispatchContext.Provider value={dispatch}>\n      <div className={appClassName}>\n        <Management gameState={gameState} isVisible={isSidePanelVisible} />\n        <GameArea\n          boardState={boardState}\n          gameConfig={config}\n          round={round}\n          isSidePanelVisible={isSidePanelVisible}\n          switchSidePanel={() => setSidePanelVisible(!isSidePanelVisible)}\n        />\n      </div>\n    </DispatchContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport './index.css';\nimport {\n  createBrowserRouter,\n  RouterProvider,\n  createHashRouter,\n  Routes,\n  Route,\n} from 'react-router-dom';\nimport GameOfLifeApp from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst About = () => (\n  <div\n    style={{\n      width: '100%',\n      height: '100%',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      color: 'white',\n    }}\n  >\n    <div>Some text</div>\n  </div>\n);\n\nconst Next = () => (\n  <div\n    style={{\n      width: '100%',\n      height: '100%',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      color: 'white',\n    }}\n  >\n    <div>Next</div>\n  </div>\n);\n\n// 1️⃣ Changed from App to Root\nfunction Root() {\n  // 2️⃣ `BrowserRouter` component removed, but the <Routes>/<Route>\n  // component below are unchanged\n  return (\n    <Routes>\n      <Route path=\"/\" element={<GameOfLifeApp />} />\n      <Route path=\"/about\" element={<About />} />\n      <Route path=\"/next\" element={<Next />} />\n    </Routes>\n  );\n}\n\nconst router = createHashRouter([{ path: '*', Component: Root }]);\n\nexport default function App() {\n  return <RouterProvider router={router} />;\n}\n\ncreateRoot(document.getElementById('root')!).render(<App />);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}